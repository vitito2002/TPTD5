//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

FUERZA BRUTA

parametros:
- n (grillas X)
- m (grillas Y)
- k (breakpoints)
(ver error y json despues)

casos base:
- pasarme de n (n>6)
- pasarme de m (m>6 o m<0)
- llegar a n=6 y que quede algun breakpoint por hacer (k>0 n=6) 
- no poder llegar a n=6 (k=0, n<6)

caso inductivo:
de la grilla en la que estoy, avanzo i adelante (6<=i>=1) y j arriba o abajo (j real)
min(error(fb()))

PSEUDOCODIGO:

RES:{}
FB(N,M,K){  // --> DEVUELVE LISTA DE COORDENADAS (DUPLAS)

// caso base:
if (n>6 v m>6 v m<0 v (k>0 ^ n=6) v (k=0 ^ n<6)){
    return []
} else if (k=0 ^ n=6){
    return res
}

// caso inductivo:
for i in n (1 a n){
    for j in m (-m a m){
        res.append (ij)
        return min{calcular_e(FB(i,j,k-1))}
    }
}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FUERZA BRUTA 2.0

parametros:
- n (grillas X, es decir posibles breakpoints)
- m (grillas Y, es decir posibles breakpoints)
- k (breakpoints)
- puntos (diccionario del json parseado, tiene claves "x" y "y", que contienen listas de coordenadas y "n" indica el número total de puntos disponibles)
- Res (se inicializa como res = none ,porque hay que tenerlo en cada iteracion)

casos base:
- pasarme de n (n>6)
- pasarme de m (m>6 o m<0)
-
- llegar a n=6 y que quede algun breakpoint por hacer (k>0 n=6) 
- no poder llegar a n=6 (k=0, n<6)

caso inductivo:
de la grilla en la que estoy, avanzo i adelante (6<=i>=1) y j arriba o abajo (j real)
min(error(fb()))

PSEUDOCODIGO:

def fuerza_bruta_recursiva(N, M, K, puntos, res=None):
    # Función recursiva de fuerza bruta para buscar la solución óptima
    if res is None:
        res = []  # Inicializa una nueva lista vacía si res no se proporciona

    # Caso base:
    if N > len(puntos["x"]) or M > len(puntos["y"]) or M < 0 or (K > 0 and N == len(puntos["x"])) or (K == 0 and N < len(puntos["x"])):
        return []  # Devuelve una lista vacía si no se cumple alguna de estas condiciones
    elif K == 0 and N == len(puntos["x"]):
        return res  # Devuelve el resultado final si K es 0 y N es igual al número de puntos

    # Caso inductivo:
    mejor_error = float('inf')  # Inicializa el mejor error con un valor infinito
    mejor_solucion = None

    for i in range(1, N + 1):
        for j in range(-M, M + 1):
            nueva_solucion = res[:] + [(i, j)]
            error_total = sum(calcular_error(puntos["x"][nueva_solucion[k][0]], puntos["x"][nueva_solucion[k+1][0]], puntos) for k in range(len(nueva_solucion) - 1))
            
            if error_total < mejor_error:
                mejor_error = error_total
                mejor_solucion = nueva_solucion

    # Llama recursivamente a la función con las nuevas coordenadas y K-1
    return fuerza_bruta_recursiva(N, M, K - 1, puntos, mejor_solucion)


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BACKTRACKING

FACTIBILIDAD

- si k=n+1, y en una grilla no hay ningun punto directamente pasar al siguiente
if k=n+1 {tramo de res solo se puede mover n=1}
- si k > n+1, no se puede
- si quedan k breakpoints y m grillas, el tramo actual no puede ser mas grande que X grillas
    Cada salto no puede sejar menos casillas que breakpoints restantes.
if k<N/k {tramo de res solo se puede mover n=[1,2,3]}

OPTIMALIDAD
- si error actual es mayor a error minimo, dejar de iterar
        calcular error acumulado si agregamos breakpoint
- si el error es 0, terminar la funcon y devolver eso
        if recursion['error'] == 0:
    return recursion

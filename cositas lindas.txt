PREGUNTAS:


RTAS:
- ¿funcion tiene que si o si terminar al final de la grilla o puede terminar antes? SI
- ¿manera de viti: hacer todos los casos de FB? SI
- ¿k lo elegimos nosotros y queda fijo / puede ser cualquiera? CUALQUIERA
    - ¿k=n? asi sabemos que si o si se va a mover 1 casilla adelante y no contemplamos otros casos? POSIBLE PODA??
- ¿podemos FOR que recorra todos los X y todos los Y? SI

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

FUERZA BRUTA

parametros:
- n (grillas X)
- m (grillas Y)
- k (breakpoints)
(ver error y json despues)

casos base:
- pasarme de n (n>6)
- pasarme de m (m>6 o m<0)
- llegar a n=6 y que quede algun breakpoint por hacer (k>0 n=6) 
- no poder llegar a n=6 (k=0, n<6)

caso inductivo:
de la grilla en la que estoy, avanzo i adelante (6<=i>=1) y j arriba o abajo (j real)
min(error(fb()))

PSEUDOCODIGO:

RES:{}
FB(N,M,K){  // --> DEVUELVE LISTA DE COORDENADAS (DUPLAS)

// caso base:
if (n>6 v m>6 v m<0 v (k>0 ^ n=6) v (k=0 ^ n<6)){
    return []
} else if (k=0 ^ n=6){
    return res
}

// caso inductivo:
for i in n (1 a n){
    for j in m (-m a m){
        res.append (ij)
        return min{calcular_e(FB(i,j,k-1))}
    }
}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BACKTRACKING

FACTIBILIDAD

- si k=n+1, y en una grilla no hay ningun punto directamente pasar al siguiente
if k=n+1 {tramo de res solo se puede mover n=1}
- si k > n+1, no se puede
- si quedan k breakpoints y m grillas, el tramo actual no puede ser mas grande que X grillas
if k<N/k {tramo de res solo se puede mover n=[1,2,3]}

OPTIMALIDAD
- si error actual es mayor a error minimo, dejar de iterar
